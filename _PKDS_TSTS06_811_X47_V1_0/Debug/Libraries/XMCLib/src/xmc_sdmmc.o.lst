   1              	 .cpu cortex-m4
   2              	 .eabi_attribute 27,1
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,6
  10              	 .eabi_attribute 34,1
  11              	 .eabi_attribute 18,4
  12              	 .file "xmc_sdmmc.c"
  13              	 .text
  14              	.Ltext0:
  15              	 .cfi_sections .debug_frame
  16              	 .section .text.XMC_SDMMC_GetPowerStatus,"ax",%progbits
  17              	 .align 1
  18              	 .global XMC_SDMMC_GetPowerStatus
  19              	 .arch armv7e-m
  20              	 .syntax unified
  21              	 .thumb
  22              	 .thumb_func
  23              	 .fpu fpv4-sp-d16
  25              	XMC_SDMMC_GetPowerStatus:
  26              	.LFB215:
  27              	 .file 1 "../Libraries/XMCLib/src/xmc_sdmmc.c"
   1:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
   2:../Libraries/XMCLib/src/xmc_sdmmc.c **** /**
   3:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @file xmc_sdmmc.c
   4:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @date 2019-05-07
   5:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
   6:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @cond
   7:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *****************************************************************************
   8:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * XMClib v2.2.0 - XMC Peripheral Driver Library
   9:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  10:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Copyright (c) 2015-2020, Infineon Technologies AG
  11:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * All rights reserved.
  12:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  13:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Boost Software License - Version 1.0 - August 17th, 2003
  14:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  15:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Permission is hereby granted, free of charge, to any person or organization
  16:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * obtaining a copy of the software and accompanying documentation covered by
  17:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * this license (the "Software") to use, reproduce, display, distribute,
  18:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * execute, and transmit the Software, and to prepare derivative works of the
  19:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Software, and to permit third-parties to whom the Software is furnished to
  20:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * do so, all subject to the following:
  21:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  22:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * The copyright notices in the Software and this entire statement, including
  23:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * the above license grant, this restriction and the following disclaimer,
  24:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * must be included in all copies of the Software, in whole or in part, and
  25:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * all derivative works of the Software, unless such copies or derivative
  26:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * works are solely in the form of machine-executable object code generated by
  27:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * a source language processor.
  28:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  29:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  30:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  31:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
  32:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
  33:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
  34:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  35:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * DEALINGS IN THE SOFTWARE.
  36:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  37:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * To improve the quality of the software, users are encouraged to share
  38:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * modifications, enhancements or bug fixes with Infineon Technologies AG
  39:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * at XMCSupport@infineon.com.
  40:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *****************************************************************************
  41:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  42:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Change History
  43:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * --------------
  44:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  45:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * 2015-02-20:
  46:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *     - Initial <br>
  47:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *     - Removed GetDriverVersion API <br>
  48:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  49:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * 2015-06-20:
  50:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *     - Removed definition of GetDriverVersion API <br>
  51:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  52:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * 2016-03-14:
  53:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *     - Values are directly assigned to the int status registers <br>
  54:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  55:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * 2016-07-11:
  56:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *     - XMC_SDMMC_SetDataTransferMode() shall not invoke SetDateLineTimeout() <br>
  57:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  58:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * 2019-05-07:
  59:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *     - Fixed compilation warnings
  60:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  61:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @endcond
  62:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
  63:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
  64:../Libraries/XMCLib/src/xmc_sdmmc.c **** /**
  65:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @addtogroup XMClib
  66:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @{
  67:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
  68:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
  69:../Libraries/XMCLib/src/xmc_sdmmc.c **** /**
  70:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @addtogroup SDMMC
  71:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @brief SDMMC driver
  72:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @{
  73:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
  74:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
  75:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*******************************************************************************
  76:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * HEADER FILES
  77:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *******************************************************************************/
  78:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
  79:../Libraries/XMCLib/src/xmc_sdmmc.c **** #include "xmc_sdmmc.h"
  80:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
  81:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
  82:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * The SDMMC peripheral is only available on the
  83:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * XMC4500. The SDMMC definition can be found in
  84:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * the XMC4500.h (device header file).
  85:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
  86:../Libraries/XMCLib/src/xmc_sdmmc.c **** #if defined (SDMMC)
  87:../Libraries/XMCLib/src/xmc_sdmmc.c **** #include "xmc_scu.h"
  88:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
  89:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*******************************************************************************
  90:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * MACROS
  91:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *******************************************************************************/
  92:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
  93:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
  94:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Check for valid SDMMC error events <br>
  95:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  96:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
  97:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
  98:../Libraries/XMCLib/src/xmc_sdmmc.c **** #define XMC_SDMMC_CHECK_ERROR_EVENT(e)\
  99:../Libraries/XMCLib/src/xmc_sdmmc.c ****   ((e == XMC_SDMMC_CMD_TIMEOUT_ERR)     ||\
 100:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_CMD_CRC_ERR)         ||\
 101:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_CMD_END_BIT_ERR)     ||\
 102:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_CMD_IND_ERR)         ||\
 103:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_DATA_TIMEOUT_ERR)    ||\
 104:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_DATA_CRC_ERR)        ||\
 105:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_DATA_END_BIT_ERR)    ||\
 106:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_CURRENT_LIMIT_ERR)   ||\
 107:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_ACMD_ERR)            ||\
 108:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_TARGET_RESP_ERR))
 109:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 110:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
 111:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Check for valid SDMMC normal events <br>
 112:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
 113:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
 114:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
 115:../Libraries/XMCLib/src/xmc_sdmmc.c **** #define XMC_SDMMC_CHECK_NORMAL_EVENT(e)\
 116:../Libraries/XMCLib/src/xmc_sdmmc.c ****   ((e == XMC_SDMMC_CMD_COMPLETE)        ||\
 117:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_TX_COMPLETE)         ||\
 118:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_BLOCK_GAP_EVENT)     ||\
 119:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_BUFFER_WRITE_READY)  ||\
 120:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_BUFFER_READ_READY)   ||\
 121:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_CARD_INS)            ||\
 122:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_CARD_REMOVAL)        ||\
 123:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_CARD_INT))
 124:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 125:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
 126:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Check for both normal and error events <br>
 127:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
 128:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
 129:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
 130:../Libraries/XMCLib/src/xmc_sdmmc.c **** #define XMC_SDMMC_CHECK_EVENT(e)\
 131:../Libraries/XMCLib/src/xmc_sdmmc.c ****   ((XMC_SDMMC_CHECK_NORMAL_EVENT(e))    ||\
 132:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (XMC_SDMMC_CHECK_ERROR_EVENT(e)))
 133:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 134:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
 135:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Check for valid SDMMC wakeup events <br>
 136:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
 137:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
 138:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
 139:../Libraries/XMCLib/src/xmc_sdmmc.c **** #define XMC_SDMMC_CHECK_WAKEUP_EVENT(w)\
 140:../Libraries/XMCLib/src/xmc_sdmmc.c ****   ((w == XMC_SDMMC_WAKEUP_EN_CARD_INT)  ||\
 141:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (w == XMC_SDMMC_WAKEUP_EN_CARD_INS)  ||\
 142:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (w == XMC_SDMMC_WAKEUP_EN_CARD_REM))
 143:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 144:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
 145:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Check for valid SDMMC software reset modes <br>
 146:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
 147:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
 148:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
 149:../Libraries/XMCLib/src/xmc_sdmmc.c **** #define XMC_SDMMC_CHECK_SW_RESET_MODE(m)\
 150:../Libraries/XMCLib/src/xmc_sdmmc.c ****   ((m == XMC_SDMMC_SW_RESET_ALL)        ||\
 151:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (m == XMC_SDMMC_SW_RST_CMD_LINE)     ||\
 152:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (m == XMC_SDMMC_SW_RST_DAT_LINE))
 153:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 154:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
 155:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Check for valid SDMMC transfer modes <br>
 156:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
 157:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
 158:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
 159:../Libraries/XMCLib/src/xmc_sdmmc.c **** #define XMC_SDMMC_CHECK_TRANSFER_MODE(m)\
 160:../Libraries/XMCLib/src/xmc_sdmmc.c ****   ((m == XMC_SDMMC_TRANSFER_MODE_TYPE_SINGLE)    ||\
 161:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (m == XMC_SDMMC_TRANSFER_MODE_TYPE_INFINITE)  ||\
 162:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (m == XMC_SDMMC_TRANSFER_MODE_TYPE_MULTIPLE)  ||\
 163:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (m == XMC_SDMMC_TRANSFER_MODE_TYPE_STOP_MULTIPLE))
 164:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 165:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 166:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*******************************************************************************
 167:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * API IMPLEMENTATION
 168:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *******************************************************************************/
 169:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 170:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Get power status of the SDMMC peripheral */
 171:../Libraries/XMCLib/src/xmc_sdmmc.c **** bool XMC_SDMMC_GetPowerStatus(XMC_SDMMC_t *const sdmmc)
 172:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
  28              	 .loc 1 172 1
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	 
  33 0000 80B4     	 push {r7}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 4
  36              	 .cfi_offset 7,-4
  37 0002 83B0     	 sub sp,sp,#12
  38              	.LCFI1:
  39              	 .cfi_def_cfa_offset 16
  40 0004 00AF     	 add r7,sp,#0
  41              	.LCFI2:
  42              	 .cfi_def_cfa_register 7
  43 0006 7860     	 str r0,[r7,#4]
 173:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_GetPowerStatus: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc))
 174:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 175:../Libraries/XMCLib/src/xmc_sdmmc.c ****   return (bool)(sdmmc->POWER_CTRL & SDMMC_POWER_CTRL_SD_BUS_POWER_Msk);
  44              	 .loc 1 175 22
  45 0008 7B68     	 ldr r3,[r7,#4]
  46 000a 93F82930 	 ldrb r3,[r3,#41]
  47 000e DBB2     	 uxtb r3,r3
  48              	 .loc 1 175 35
  49 0010 03F00103 	 and r3,r3,#1
  50              	 .loc 1 175 10
  51 0014 002B     	 cmp r3,#0
  52 0016 14BF     	 ite ne
  53 0018 0123     	 movne r3,#1
  54 001a 0023     	 moveq r3,#0
  55 001c DBB2     	 uxtb r3,r3
 176:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
  56              	 .loc 1 176 1
  57 001e 1846     	 mov r0,r3
  58 0020 0C37     	 adds r7,r7,#12
  59              	.LCFI3:
  60              	 .cfi_def_cfa_offset 4
  61 0022 BD46     	 mov sp,r7
  62              	.LCFI4:
  63              	 .cfi_def_cfa_register 13
  64              	 
  65 0024 5DF8047B 	 ldr r7,[sp],#4
  66              	.LCFI5:
  67              	 .cfi_restore 7
  68              	 .cfi_def_cfa_offset 0
  69 0028 7047     	 bx lr
  70              	 .cfi_endproc
  71              	.LFE215:
  73              	 .section .text.XMC_SDMMC_Enable,"ax",%progbits
  74              	 .align 1
  75              	 .global XMC_SDMMC_Enable
  76              	 .syntax unified
  77              	 .thumb
  78              	 .thumb_func
  79              	 .fpu fpv4-sp-d16
  81              	XMC_SDMMC_Enable:
  82              	.LFB216:
 177:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 178:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
 179:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * De-assert the peripheral reset. The SDMMC peripheral
 180:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * needs to be initialized
 181:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
 182:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_Enable(XMC_SDMMC_t *const sdmmc)
 183:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
  83              	 .loc 1 183 1
  84              	 .cfi_startproc
  85              	 
  86              	 
  87 0000 80B5     	 push {r7,lr}
  88              	.LCFI6:
  89              	 .cfi_def_cfa_offset 8
  90              	 .cfi_offset 7,-8
  91              	 .cfi_offset 14,-4
  92 0002 82B0     	 sub sp,sp,#8
  93              	.LCFI7:
  94              	 .cfi_def_cfa_offset 16
  95 0004 00AF     	 add r7,sp,#0
  96              	.LCFI8:
  97              	 .cfi_def_cfa_register 7
  98 0006 7860     	 str r0,[r7,#4]
 184:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_Enable: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 185:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_UNUSED_ARG(sdmmc);
 186:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 187:../Libraries/XMCLib/src/xmc_sdmmc.c **** #if defined(CLOCK_GATING_SUPPORTED)
 188:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_SDMMC);
  99              	 .loc 1 188 3
 100 0008 0448     	 ldr r0,.L4
 101 000a FFF7FEFF 	 bl XMC_SCU_CLOCK_UngatePeripheralClock
 189:../Libraries/XMCLib/src/xmc_sdmmc.c **** #endif
 190:../Libraries/XMCLib/src/xmc_sdmmc.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 191:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_SDMMC);
 102              	 .loc 1 191 3
 103 000e 0348     	 ldr r0,.L4
 104 0010 FFF7FEFF 	 bl XMC_SCU_RESET_DeassertPeripheralReset
 192:../Libraries/XMCLib/src/xmc_sdmmc.c **** #endif
 193:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 105              	 .loc 1 193 1
 106 0014 00BF     	 nop
 107 0016 0837     	 adds r7,r7,#8
 108              	.LCFI9:
 109              	 .cfi_def_cfa_offset 8
 110 0018 BD46     	 mov sp,r7
 111              	.LCFI10:
 112              	 .cfi_def_cfa_register 13
 113              	 
 114 001a 80BD     	 pop {r7,pc}
 115              	.L5:
 116              	 .align 2
 117              	.L4:
 118 001c 40000010 	 .word 268435520
 119              	 .cfi_endproc
 120              	.LFE216:
 122              	 .section .text.XMC_SDMMC_Disable,"ax",%progbits
 123              	 .align 1
 124              	 .global XMC_SDMMC_Disable
 125              	 .syntax unified
 126              	 .thumb
 127              	 .thumb_func
 128              	 .fpu fpv4-sp-d16
 130              	XMC_SDMMC_Disable:
 131              	.LFB217:
 194:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 195:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Assert the peripheral reset */
 196:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_Disable(XMC_SDMMC_t *const sdmmc)
 197:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 132              	 .loc 1 197 1
 133              	 .cfi_startproc
 134              	 
 135              	 
 136 0000 80B5     	 push {r7,lr}
 137              	.LCFI11:
 138              	 .cfi_def_cfa_offset 8
 139              	 .cfi_offset 7,-8
 140              	 .cfi_offset 14,-4
 141 0002 82B0     	 sub sp,sp,#8
 142              	.LCFI12:
 143              	 .cfi_def_cfa_offset 16
 144 0004 00AF     	 add r7,sp,#0
 145              	.LCFI13:
 146              	 .cfi_def_cfa_register 7
 147 0006 7860     	 str r0,[r7,#4]
 198:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_Disable: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 199:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_UNUSED_ARG(sdmmc);
 200:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 201:../Libraries/XMCLib/src/xmc_sdmmc.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 202:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_SDMMC);
 148              	 .loc 1 202 3
 149 0008 0448     	 ldr r0,.L7
 150 000a FFF7FEFF 	 bl XMC_SCU_RESET_AssertPeripheralReset
 203:../Libraries/XMCLib/src/xmc_sdmmc.c **** #endif
 204:../Libraries/XMCLib/src/xmc_sdmmc.c **** #if defined(CLOCK_GATING_SUPPORTED)
 205:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_SDMMC);
 151              	 .loc 1 205 3
 152 000e 0348     	 ldr r0,.L7
 153 0010 FFF7FEFF 	 bl XMC_SCU_CLOCK_GatePeripheralClock
 206:../Libraries/XMCLib/src/xmc_sdmmc.c **** #endif
 207:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 154              	 .loc 1 207 1
 155 0014 00BF     	 nop
 156 0016 0837     	 adds r7,r7,#8
 157              	.LCFI14:
 158              	 .cfi_def_cfa_offset 8
 159 0018 BD46     	 mov sp,r7
 160              	.LCFI15:
 161              	 .cfi_def_cfa_register 13
 162              	 
 163 001a 80BD     	 pop {r7,pc}
 164              	.L8:
 165              	 .align 2
 166              	.L7:
 167 001c 40000010 	 .word 268435520
 168              	 .cfi_endproc
 169              	.LFE217:
 171              	 .section .text.XMC_SDMMC_Init,"ax",%progbits
 172              	 .align 1
 173              	 .global XMC_SDMMC_Init
 174              	 .syntax unified
 175              	 .thumb
 176              	 .thumb_func
 177              	 .fpu fpv4-sp-d16
 179              	XMC_SDMMC_Init:
 180              	.LFB218:
 208:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 209:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Initialize SDMMC peripheral */
 210:../Libraries/XMCLib/src/xmc_sdmmc.c **** XMC_SDMMC_STATUS_t XMC_SDMMC_Init(XMC_SDMMC_t *const sdmmc, const XMC_SDMMC_CONFIG_t *config)
 211:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 181              	 .loc 1 211 1
 182              	 .cfi_startproc
 183              	 
 184              	 
 185 0000 80B5     	 push {r7,lr}
 186              	.LCFI16:
 187              	 .cfi_def_cfa_offset 8
 188              	 .cfi_offset 7,-8
 189              	 .cfi_offset 14,-4
 190 0002 82B0     	 sub sp,sp,#8
 191              	.LCFI17:
 192              	 .cfi_def_cfa_offset 16
 193 0004 00AF     	 add r7,sp,#0
 194              	.LCFI18:
 195              	 .cfi_def_cfa_register 7
 196 0006 7860     	 str r0,[r7,#4]
 197 0008 3960     	 str r1,[r7]
 212:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_Init: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 213:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_Init: Invalid clock divider value", XMC_SDMMC_CHECK_SDCLK_FREQ(config->cloc
 214:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_Init: Invalid bus width", XMC_SDMMC_CHECK_DATA_LINES(config->bus_width));
 215:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 216:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Enable SDMMC peripheral */
 217:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_SDMMC_Enable(sdmmc);
 198              	 .loc 1 217 3
 199 000a 7868     	 ldr r0,[r7,#4]
 200 000c FFF7FEFF 	 bl XMC_SDMMC_Enable
 218:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 219:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Write internal clock divider register */
 220:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->CLOCK_CTRL |= (uint16_t)((uint32_t)config->clock_divider << SDMMC_CLOCK_CTRL_SDCLK_FREQ_SE
 201              	 .loc 1 220 21
 202 0010 7B68     	 ldr r3,[r7,#4]
 203 0012 9B8D     	 ldrh r3,[r3,#44]
 204 0014 9AB2     	 uxth r2,r3
 205              	 .loc 1 220 51
 206 0016 3B68     	 ldr r3,[r7]
 207 0018 5B78     	 ldrb r3,[r3,#1]
 208 001a 9BB2     	 uxth r3,r3
 209              	 .loc 1 220 24
 210 001c 1B02     	 lsls r3,r3,#8
 211 001e 9BB2     	 uxth r3,r3
 212              	 .loc 1 220 21
 213 0020 1343     	 orrs r3,r3,r2
 214 0022 9AB2     	 uxth r2,r3
 215 0024 7B68     	 ldr r3,[r7,#4]
 216 0026 9A85     	 strh r2,[r3,#44]
 221:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 222:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Set bus width */
 223:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->HOST_CTRL = (uint8_t)((sdmmc->HOST_CTRL & (uint8_t)~SDMMC_HOST_CTRL_DATA_TX_WIDTH_Msk) |
 217              	 .loc 1 223 38
 218 0028 7B68     	 ldr r3,[r7,#4]
 219 002a 93F82830 	 ldrb r3,[r3,#40]
 220 002e DBB2     	 uxtb r3,r3
 221 0030 5BB2     	 sxtb r3,r3
 222              	 .loc 1 223 50
 223 0032 23F00203 	 bic r3,r3,#2
 224 0036 5AB2     	 sxtb r2,r3
 224:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                ((uint8_t)config->bus_width << SDMMC_HOST_CTRL_DATA_TX_WIDTH_Pos));
 225              	 .loc 1 224 48
 226 0038 3B68     	 ldr r3,[r7]
 227 003a 1B78     	 ldrb r3,[r3]
 228              	 .loc 1 224 60
 229 003c 5B00     	 lsls r3,r3,#1
 223:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                ((uint8_t)config->bus_width << SDMMC_HOST_CTRL_DATA_TX_WIDTH_Pos));
 230              	 .loc 1 223 97
 231 003e 5BB2     	 sxtb r3,r3
 232 0040 1343     	 orrs r3,r3,r2
 233 0042 5BB2     	 sxtb r3,r3
 223:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                ((uint8_t)config->bus_width << SDMMC_HOST_CTRL_DATA_TX_WIDTH_Pos));
 234              	 .loc 1 223 22
 235 0044 DAB2     	 uxtb r2,r3
 223:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                ((uint8_t)config->bus_width << SDMMC_HOST_CTRL_DATA_TX_WIDTH_Pos));
 236              	 .loc 1 223 20
 237 0046 7B68     	 ldr r3,[r7,#4]
 238 0048 83F82820 	 strb r2,[r3,#40]
 225:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 226:../Libraries/XMCLib/src/xmc_sdmmc.c ****   return XMC_SDMMC_STATUS_SUCCESS;
 239              	 .loc 1 226 10
 240 004c 0023     	 movs r3,#0
 227:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 241              	 .loc 1 227 1
 242 004e 1846     	 mov r0,r3
 243 0050 0837     	 adds r7,r7,#8
 244              	.LCFI19:
 245              	 .cfi_def_cfa_offset 8
 246 0052 BD46     	 mov sp,r7
 247              	.LCFI20:
 248              	 .cfi_def_cfa_register 13
 249              	 
 250 0054 80BD     	 pop {r7,pc}
 251              	 .cfi_endproc
 252              	.LFE218:
 254              	 .section .text.XMC_SDMMC_EnableEventStatus,"ax",%progbits
 255              	 .align 1
 256              	 .global XMC_SDMMC_EnableEventStatus
 257              	 .syntax unified
 258              	 .thumb
 259              	 .thumb_func
 260              	 .fpu fpv4-sp-d16
 262              	XMC_SDMMC_EnableEventStatus:
 263              	.LFB219:
 228:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 229:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Enable event status */
 230:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_EnableEventStatus(XMC_SDMMC_t *const sdmmc, uint32_t event)
 231:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 264              	 .loc 1 231 1
 265              	 .cfi_startproc
 266              	 
 267              	 
 268              	 
 269 0000 80B4     	 push {r7}
 270              	.LCFI21:
 271              	 .cfi_def_cfa_offset 4
 272              	 .cfi_offset 7,-4
 273 0002 83B0     	 sub sp,sp,#12
 274              	.LCFI22:
 275              	 .cfi_def_cfa_offset 16
 276 0004 00AF     	 add r7,sp,#0
 277              	.LCFI23:
 278              	 .cfi_def_cfa_register 7
 279 0006 7860     	 str r0,[r7,#4]
 280 0008 3960     	 str r1,[r7]
 232:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_EnableEventStatus: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmm
 233:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 234:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Set INT status enable register */
 235:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_STATUS_NORM |= (uint16_t)event;
 281              	 .loc 1 235 29
 282 000a 7B68     	 ldr r3,[r7,#4]
 283 000c 9B8E     	 ldrh r3,[r3,#52]
 284 000e 9AB2     	 uxth r2,r3
 285              	 .loc 1 235 32
 286 0010 3B68     	 ldr r3,[r7]
 287 0012 9BB2     	 uxth r3,r3
 288              	 .loc 1 235 29
 289 0014 1343     	 orrs r3,r3,r2
 290 0016 9AB2     	 uxth r2,r3
 291 0018 7B68     	 ldr r3,[r7,#4]
 292 001a 9A86     	 strh r2,[r3,#52]
 236:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_STATUS_ERR |= (uint16_t)(event >> 16U);
 293              	 .loc 1 236 28
 294 001c 7B68     	 ldr r3,[r7,#4]
 295 001e DB8E     	 ldrh r3,[r3,#54]
 296 0020 9AB2     	 uxth r2,r3
 297              	 .loc 1 236 48
 298 0022 3B68     	 ldr r3,[r7]
 299 0024 1B0C     	 lsrs r3,r3,#16
 300              	 .loc 1 236 31
 301 0026 9BB2     	 uxth r3,r3
 302              	 .loc 1 236 28
 303 0028 1343     	 orrs r3,r3,r2
 304 002a 9AB2     	 uxth r2,r3
 305 002c 7B68     	 ldr r3,[r7,#4]
 306 002e DA86     	 strh r2,[r3,#54]
 237:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 307              	 .loc 1 237 1
 308 0030 00BF     	 nop
 309 0032 0C37     	 adds r7,r7,#12
 310              	.LCFI24:
 311              	 .cfi_def_cfa_offset 4
 312 0034 BD46     	 mov sp,r7
 313              	.LCFI25:
 314              	 .cfi_def_cfa_register 13
 315              	 
 316 0036 5DF8047B 	 ldr r7,[sp],#4
 317              	.LCFI26:
 318              	 .cfi_restore 7
 319              	 .cfi_def_cfa_offset 0
 320 003a 7047     	 bx lr
 321              	 .cfi_endproc
 322              	.LFE219:
 324              	 .section .text.XMC_SDMMC_DisableEventStatus,"ax",%progbits
 325              	 .align 1
 326              	 .global XMC_SDMMC_DisableEventStatus
 327              	 .syntax unified
 328              	 .thumb
 329              	 .thumb_func
 330              	 .fpu fpv4-sp-d16
 332              	XMC_SDMMC_DisableEventStatus:
 333              	.LFB220:
 238:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 239:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Disable event status */
 240:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_DisableEventStatus(XMC_SDMMC_t *const sdmmc, uint32_t event)
 241:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 334              	 .loc 1 241 1
 335              	 .cfi_startproc
 336              	 
 337              	 
 338              	 
 339 0000 80B4     	 push {r7}
 340              	.LCFI27:
 341              	 .cfi_def_cfa_offset 4
 342              	 .cfi_offset 7,-4
 343 0002 83B0     	 sub sp,sp,#12
 344              	.LCFI28:
 345              	 .cfi_def_cfa_offset 16
 346 0004 00AF     	 add r7,sp,#0
 347              	.LCFI29:
 348              	 .cfi_def_cfa_register 7
 349 0006 7860     	 str r0,[r7,#4]
 350 0008 3960     	 str r1,[r7]
 242:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_DisableEventStatus: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdm
 243:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 244:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Clear INT status enable register */
 245:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_STATUS_NORM &= (uint16_t)~event;
 351              	 .loc 1 245 29
 352 000a 7B68     	 ldr r3,[r7,#4]
 353 000c 9B8E     	 ldrh r3,[r3,#52]
 354 000e 9AB2     	 uxth r2,r3
 355              	 .loc 1 245 32
 356 0010 3B68     	 ldr r3,[r7]
 357 0012 9BB2     	 uxth r3,r3
 358 0014 DB43     	 mvns r3,r3
 359 0016 9BB2     	 uxth r3,r3
 360              	 .loc 1 245 29
 361 0018 1340     	 ands r3,r3,r2
 362 001a 9AB2     	 uxth r2,r3
 363 001c 7B68     	 ldr r3,[r7,#4]
 364 001e 9A86     	 strh r2,[r3,#52]
 246:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_STATUS_ERR &= (uint16_t)~(event >> 16U);
 365              	 .loc 1 246 28
 366 0020 7B68     	 ldr r3,[r7,#4]
 367 0022 DB8E     	 ldrh r3,[r3,#54]
 368 0024 9AB2     	 uxth r2,r3
 369              	 .loc 1 246 49
 370 0026 3B68     	 ldr r3,[r7]
 371 0028 1B0C     	 lsrs r3,r3,#16
 372              	 .loc 1 246 31
 373 002a 9BB2     	 uxth r3,r3
 374 002c DB43     	 mvns r3,r3
 375 002e 9BB2     	 uxth r3,r3
 376              	 .loc 1 246 28
 377 0030 1340     	 ands r3,r3,r2
 378 0032 9AB2     	 uxth r2,r3
 379 0034 7B68     	 ldr r3,[r7,#4]
 380 0036 DA86     	 strh r2,[r3,#54]
 247:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 381              	 .loc 1 247 1
 382 0038 00BF     	 nop
 383 003a 0C37     	 adds r7,r7,#12
 384              	.LCFI30:
 385              	 .cfi_def_cfa_offset 4
 386 003c BD46     	 mov sp,r7
 387              	.LCFI31:
 388              	 .cfi_def_cfa_register 13
 389              	 
 390 003e 5DF8047B 	 ldr r7,[sp],#4
 391              	.LCFI32:
 392              	 .cfi_restore 7
 393              	 .cfi_def_cfa_offset 0
 394 0042 7047     	 bx lr
 395              	 .cfi_endproc
 396              	.LFE220:
 398              	 .section .text.XMC_SDMMC_EnableEvent,"ax",%progbits
 399              	 .align 1
 400              	 .global XMC_SDMMC_EnableEvent
 401              	 .syntax unified
 402              	 .thumb
 403              	 .thumb_func
 404              	 .fpu fpv4-sp-d16
 406              	XMC_SDMMC_EnableEvent:
 407              	.LFB221:
 248:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 249:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Enable SDMMC event */
 250:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_EnableEvent(XMC_SDMMC_t *const sdmmc, uint32_t event)
 251:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 408              	 .loc 1 251 1
 409              	 .cfi_startproc
 410              	 
 411              	 
 412 0000 80B5     	 push {r7,lr}
 413              	.LCFI33:
 414              	 .cfi_def_cfa_offset 8
 415              	 .cfi_offset 7,-8
 416              	 .cfi_offset 14,-4
 417 0002 82B0     	 sub sp,sp,#8
 418              	.LCFI34:
 419              	 .cfi_def_cfa_offset 16
 420 0004 00AF     	 add r7,sp,#0
 421              	.LCFI35:
 422              	 .cfi_def_cfa_register 7
 423 0006 7860     	 str r0,[r7,#4]
 424 0008 3960     	 str r1,[r7]
 252:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_EnableEvent: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 253:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 254:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_SDMMC_EnableEventStatus(sdmmc, event);
 425              	 .loc 1 254 3
 426 000a 3968     	 ldr r1,[r7]
 427 000c 7868     	 ldr r0,[r7,#4]
 428 000e FFF7FEFF 	 bl XMC_SDMMC_EnableEventStatus
 255:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 256:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_SIGNAL_NORM |= (uint16_t)event;
 429              	 .loc 1 256 29
 430 0012 7B68     	 ldr r3,[r7,#4]
 431 0014 1B8F     	 ldrh r3,[r3,#56]
 432 0016 9AB2     	 uxth r2,r3
 433              	 .loc 1 256 32
 434 0018 3B68     	 ldr r3,[r7]
 435 001a 9BB2     	 uxth r3,r3
 436              	 .loc 1 256 29
 437 001c 1343     	 orrs r3,r3,r2
 438 001e 9AB2     	 uxth r2,r3
 439 0020 7B68     	 ldr r3,[r7,#4]
 440 0022 1A87     	 strh r2,[r3,#56]
 257:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_SIGNAL_ERR |= (uint16_t)(event >> 16U);
 441              	 .loc 1 257 28
 442 0024 7B68     	 ldr r3,[r7,#4]
 443 0026 5B8F     	 ldrh r3,[r3,#58]
 444 0028 9AB2     	 uxth r2,r3
 445              	 .loc 1 257 48
 446 002a 3B68     	 ldr r3,[r7]
 447 002c 1B0C     	 lsrs r3,r3,#16
 448              	 .loc 1 257 31
 449 002e 9BB2     	 uxth r3,r3
 450              	 .loc 1 257 28
 451 0030 1343     	 orrs r3,r3,r2
 452 0032 9AB2     	 uxth r2,r3
 453 0034 7B68     	 ldr r3,[r7,#4]
 454 0036 5A87     	 strh r2,[r3,#58]
 258:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 455              	 .loc 1 258 1
 456 0038 00BF     	 nop
 457 003a 0837     	 adds r7,r7,#8
 458              	.LCFI36:
 459              	 .cfi_def_cfa_offset 8
 460 003c BD46     	 mov sp,r7
 461              	.LCFI37:
 462              	 .cfi_def_cfa_register 13
 463              	 
 464 003e 80BD     	 pop {r7,pc}
 465              	 .cfi_endproc
 466              	.LFE221:
 468              	 .section .text.XMC_SDMMC_DisableEvent,"ax",%progbits
 469              	 .align 1
 470              	 .global XMC_SDMMC_DisableEvent
 471              	 .syntax unified
 472              	 .thumb
 473              	 .thumb_func
 474              	 .fpu fpv4-sp-d16
 476              	XMC_SDMMC_DisableEvent:
 477              	.LFB222:
 259:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 260:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Disable SDMMC event without disabling event status */
 261:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_DisableEvent(XMC_SDMMC_t *const sdmmc, uint32_t event)
 262:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 478              	 .loc 1 262 1
 479              	 .cfi_startproc
 480              	 
 481              	 
 482              	 
 483 0000 80B4     	 push {r7}
 484              	.LCFI38:
 485              	 .cfi_def_cfa_offset 4
 486              	 .cfi_offset 7,-4
 487 0002 83B0     	 sub sp,sp,#12
 488              	.LCFI39:
 489              	 .cfi_def_cfa_offset 16
 490 0004 00AF     	 add r7,sp,#0
 491              	.LCFI40:
 492              	 .cfi_def_cfa_register 7
 493 0006 7860     	 str r0,[r7,#4]
 494 0008 3960     	 str r1,[r7]
 263:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_DisableEvent: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 264:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 265:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Clear INT signal enable register */
 266:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_SIGNAL_NORM &= (uint16_t)~event;
 495              	 .loc 1 266 29
 496 000a 7B68     	 ldr r3,[r7,#4]
 497 000c 1B8F     	 ldrh r3,[r3,#56]
 498 000e 9AB2     	 uxth r2,r3
 499              	 .loc 1 266 32
 500 0010 3B68     	 ldr r3,[r7]
 501 0012 9BB2     	 uxth r3,r3
 502 0014 DB43     	 mvns r3,r3
 503 0016 9BB2     	 uxth r3,r3
 504              	 .loc 1 266 29
 505 0018 1340     	 ands r3,r3,r2
 506 001a 9AB2     	 uxth r2,r3
 507 001c 7B68     	 ldr r3,[r7,#4]
 508 001e 1A87     	 strh r2,[r3,#56]
 267:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_SIGNAL_ERR &= (uint16_t)~(event >> 16U);
 509              	 .loc 1 267 28
 510 0020 7B68     	 ldr r3,[r7,#4]
 511 0022 5B8F     	 ldrh r3,[r3,#58]
 512 0024 9AB2     	 uxth r2,r3
 513              	 .loc 1 267 49
 514 0026 3B68     	 ldr r3,[r7]
 515 0028 1B0C     	 lsrs r3,r3,#16
 516              	 .loc 1 267 31
 517 002a 9BB2     	 uxth r3,r3
 518 002c DB43     	 mvns r3,r3
 519 002e 9BB2     	 uxth r3,r3
 520              	 .loc 1 267 28
 521 0030 1340     	 ands r3,r3,r2
 522 0032 9AB2     	 uxth r2,r3
 523 0034 7B68     	 ldr r3,[r7,#4]
 524 0036 5A87     	 strh r2,[r3,#58]
 268:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 525              	 .loc 1 268 1
 526 0038 00BF     	 nop
 527 003a 0C37     	 adds r7,r7,#12
 528              	.LCFI41:
 529              	 .cfi_def_cfa_offset 4
 530 003c BD46     	 mov sp,r7
 531              	.LCFI42:
 532              	 .cfi_def_cfa_register 13
 533              	 
 534 003e 5DF8047B 	 ldr r7,[sp],#4
 535              	.LCFI43:
 536              	 .cfi_restore 7
 537              	 .cfi_def_cfa_offset 0
 538 0042 7047     	 bx lr
 539              	 .cfi_endproc
 540              	.LFE222:
 542              	 .section .text.XMC_SDMMC_ClearEvent,"ax",%progbits
 543              	 .align 1
 544              	 .global XMC_SDMMC_ClearEvent
 545              	 .syntax unified
 546              	 .thumb
 547              	 .thumb_func
 548              	 .fpu fpv4-sp-d16
 550              	XMC_SDMMC_ClearEvent:
 551              	.LFB223:
 269:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 270:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Clear SDMMC event(s) */
 271:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_ClearEvent(XMC_SDMMC_t *const sdmmc, uint32_t event)
 272:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 552              	 .loc 1 272 1
 553              	 .cfi_startproc
 554              	 
 555              	 
 556              	 
 557 0000 80B4     	 push {r7}
 558              	.LCFI44:
 559              	 .cfi_def_cfa_offset 4
 560              	 .cfi_offset 7,-4
 561 0002 83B0     	 sub sp,sp,#12
 562              	.LCFI45:
 563              	 .cfi_def_cfa_offset 16
 564 0004 00AF     	 add r7,sp,#0
 565              	.LCFI46:
 566              	 .cfi_def_cfa_register 7
 567 0006 7860     	 str r0,[r7,#4]
 568 0008 3960     	 str r1,[r7]
 273:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_ClearEvent: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 274:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_ClearEvent: Invalid bit-field", !(event & XMC_SDMMC_TARGET_RESP_ERR));
 275:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 276:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->INT_STATUS_NORM = (uint16_t)event;
 569              	 .loc 1 276 28
 570 000a 3B68     	 ldr r3,[r7]
 571 000c 9AB2     	 uxth r2,r3
 572              	 .loc 1 276 26
 573 000e 7B68     	 ldr r3,[r7,#4]
 574 0010 1A86     	 strh r2,[r3,#48]
 277:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->INT_STATUS_ERR = (uint16_t)(event >> 16U);
 575              	 .loc 1 277 44
 576 0012 3B68     	 ldr r3,[r7]
 577 0014 1B0C     	 lsrs r3,r3,#16
 578              	 .loc 1 277 27
 579 0016 9AB2     	 uxth r2,r3
 580              	 .loc 1 277 25
 581 0018 7B68     	 ldr r3,[r7,#4]
 582 001a 5A86     	 strh r2,[r3,#50]
 278:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 583              	 .loc 1 278 1
 584 001c 00BF     	 nop
 585 001e 0C37     	 adds r7,r7,#12
 586              	.LCFI47:
 587              	 .cfi_def_cfa_offset 4
 588 0020 BD46     	 mov sp,r7
 589              	.LCFI48:
 590              	 .cfi_def_cfa_register 13
 591              	 
 592 0022 5DF8047B 	 ldr r7,[sp],#4
 593              	.LCFI49:
 594              	 .cfi_restore 7
 595              	 .cfi_def_cfa_offset 0
 596 0026 7047     	 bx lr
 597              	 .cfi_endproc
 598              	.LFE223:
 600              	 .section .text.XMC_SDMMC_GetEvent,"ax",%progbits
 601              	 .align 1
 602              	 .global XMC_SDMMC_GetEvent
 603              	 .syntax unified
 604              	 .thumb
 605              	 .thumb_func
 606              	 .fpu fpv4-sp-d16
 608              	XMC_SDMMC_GetEvent:
 609              	.LFB224:
 279:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 280:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Get the status of an SDMMC event */
 281:../Libraries/XMCLib/src/xmc_sdmmc.c **** bool XMC_SDMMC_GetEvent(XMC_SDMMC_t *const sdmmc, XMC_SDMMC_EVENT_t event)
 282:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 610              	 .loc 1 282 1
 611              	 .cfi_startproc
 612              	 
 613              	 
 614              	 
 615 0000 80B4     	 push {r7}
 616              	.LCFI50:
 617              	 .cfi_def_cfa_offset 4
 618              	 .cfi_offset 7,-4
 619 0002 85B0     	 sub sp,sp,#20
 620              	.LCFI51:
 621              	 .cfi_def_cfa_offset 24
 622 0004 00AF     	 add r7,sp,#0
 623              	.LCFI52:
 624              	 .cfi_def_cfa_register 7
 625 0006 7860     	 str r0,[r7,#4]
 626 0008 3960     	 str r1,[r7]
 283:../Libraries/XMCLib/src/xmc_sdmmc.c ****   bool status;
 284:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 285:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_GetEvent: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 286:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_GetEvent: Invalid SDMMC event", XMC_SDMMC_CHECK_EVENT(event));
 287:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 288:../Libraries/XMCLib/src/xmc_sdmmc.c ****   if (event < XMC_SDMMC_CMD_TIMEOUT_ERR)
 627              	 .loc 1 288 6
 628 000a 3B68     	 ldr r3,[r7]
 629 000c B3F5803F 	 cmp r3,#65536
 630 0010 0CD2     	 bcs .L17
 289:../Libraries/XMCLib/src/xmc_sdmmc.c ****   {
 290:../Libraries/XMCLib/src/xmc_sdmmc.c ****     status = (bool)(sdmmc->INT_STATUS_NORM & (uint16_t)event);
 631              	 .loc 1 290 26
 632 0012 7B68     	 ldr r3,[r7,#4]
 633 0014 1B8E     	 ldrh r3,[r3,#48]
 634 0016 9AB2     	 uxth r2,r3
 635              	 .loc 1 290 46
 636 0018 3B68     	 ldr r3,[r7]
 637 001a 9BB2     	 uxth r3,r3
 638              	 .loc 1 290 14
 639 001c 1340     	 ands r3,r3,r2
 640 001e 9BB2     	 uxth r3,r3
 641              	 .loc 1 290 12
 642 0020 002B     	 cmp r3,#0
 643 0022 14BF     	 ite ne
 644 0024 0123     	 movne r3,#1
 645 0026 0023     	 moveq r3,#0
 646 0028 FB73     	 strb r3,[r7,#15]
 647 002a 0CE0     	 b .L18
 648              	.L17:
 291:../Libraries/XMCLib/src/xmc_sdmmc.c ****   }
 292:../Libraries/XMCLib/src/xmc_sdmmc.c ****   else
 293:../Libraries/XMCLib/src/xmc_sdmmc.c ****   {
 294:../Libraries/XMCLib/src/xmc_sdmmc.c ****     status = (bool)(sdmmc->INT_STATUS_ERR & (uint16_t)((uint32_t)event >> 16U));
 649              	 .loc 1 294 26
 650 002c 7B68     	 ldr r3,[r7,#4]
 651 002e 5B8E     	 ldrh r3,[r3,#50]
 652 0030 9AB2     	 uxth r2,r3
 653              	 .loc 1 294 72
 654 0032 3B68     	 ldr r3,[r7]
 655 0034 1B0C     	 lsrs r3,r3,#16
 656              	 .loc 1 294 45
 657 0036 9BB2     	 uxth r3,r3
 658              	 .loc 1 294 14
 659 0038 1340     	 ands r3,r3,r2
 660 003a 9BB2     	 uxth r3,r3
 661              	 .loc 1 294 12
 662 003c 002B     	 cmp r3,#0
 663 003e 14BF     	 ite ne
 664 0040 0123     	 movne r3,#1
 665 0042 0023     	 moveq r3,#0
 666 0044 FB73     	 strb r3,[r7,#15]
 667              	.L18:
 295:../Libraries/XMCLib/src/xmc_sdmmc.c ****   }
 296:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 297:../Libraries/XMCLib/src/xmc_sdmmc.c ****   return status;
 668              	 .loc 1 297 10
 669 0046 FB7B     	 ldrb r3,[r7,#15]
 298:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 670              	 .loc 1 298 1
 671 0048 1846     	 mov r0,r3
 672 004a 1437     	 adds r7,r7,#20
 673              	.LCFI53:
 674              	 .cfi_def_cfa_offset 4
 675 004c BD46     	 mov sp,r7
 676              	.LCFI54:
 677              	 .cfi_def_cfa_register 13
 678              	 
 679 004e 5DF8047B 	 ldr r7,[sp],#4
 680              	.LCFI55:
 681              	 .cfi_restore 7
 682              	 .cfi_def_cfa_offset 0
 683 0052 7047     	 bx lr
 684              	 .cfi_endproc
 685              	.LFE224:
 687              	 .section .text.XMC_SDMMC_GetR2Response,"ax",%progbits
 688              	 .align 1
 689              	 .global XMC_SDMMC_GetR2Response
 690              	 .syntax unified
 691              	 .thumb
 692              	 .thumb_func
 693              	 .fpu fpv4-sp-d16
 695              	XMC_SDMMC_GetR2Response:
 696              	.LFB225:
 299:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 300:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Read R2 response (CID, CSD register) */
 301:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_GetR2Response(XMC_SDMMC_t *const sdmmc, XMC_SDMMC_RESPONSE_t *const response)
 302:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 697              	 .loc 1 302 1
 698              	 .cfi_startproc
 699              	 
 700              	 
 701              	 
 702 0000 80B4     	 push {r7}
 703              	.LCFI56:
 704              	 .cfi_def_cfa_offset 4
 705              	 .cfi_offset 7,-4
 706 0002 83B0     	 sub sp,sp,#12
 707              	.LCFI57:
 708              	 .cfi_def_cfa_offset 16
 709 0004 00AF     	 add r7,sp,#0
 710              	.LCFI58:
 711              	 .cfi_def_cfa_register 7
 712 0006 7860     	 str r0,[r7,#4]
 713 0008 3960     	 str r1,[r7]
 303:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_GetR2Response: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 304:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 305:../Libraries/XMCLib/src/xmc_sdmmc.c ****   response->response_0 = sdmmc->RESPONSE[0];
 714              	 .loc 1 305 41
 715 000a 7B68     	 ldr r3,[r7,#4]
 716 000c 1A69     	 ldr r2,[r3,#16]
 717              	 .loc 1 305 24
 718 000e 3B68     	 ldr r3,[r7]
 719 0010 1A60     	 str r2,[r3]
 306:../Libraries/XMCLib/src/xmc_sdmmc.c ****   response->response_2 = sdmmc->RESPONSE[1];
 720              	 .loc 1 306 41
 721 0012 7B68     	 ldr r3,[r7,#4]
 722 0014 5A69     	 ldr r2,[r3,#20]
 723              	 .loc 1 306 24
 724 0016 3B68     	 ldr r3,[r7]
 725 0018 5A60     	 str r2,[r3,#4]
 307:../Libraries/XMCLib/src/xmc_sdmmc.c ****   response->response_4 = sdmmc->RESPONSE[2];
 726              	 .loc 1 307 41
 727 001a 7B68     	 ldr r3,[r7,#4]
 728 001c 9A69     	 ldr r2,[r3,#24]
 729              	 .loc 1 307 24
 730 001e 3B68     	 ldr r3,[r7]
 731 0020 9A60     	 str r2,[r3,#8]
 308:../Libraries/XMCLib/src/xmc_sdmmc.c ****   response->response_6 = sdmmc->RESPONSE[3];
 732              	 .loc 1 308 41
 733 0022 7B68     	 ldr r3,[r7,#4]
 734 0024 DA69     	 ldr r2,[r3,#28]
 735              	 .loc 1 308 24
 736 0026 3B68     	 ldr r3,[r7]
 737 0028 DA60     	 str r2,[r3,#12]
 309:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 738              	 .loc 1 309 1
 739 002a 00BF     	 nop
 740 002c 0C37     	 adds r7,r7,#12
 741              	.LCFI59:
 742              	 .cfi_def_cfa_offset 4
 743 002e BD46     	 mov sp,r7
 744              	.LCFI60:
 745              	 .cfi_def_cfa_register 13
 746              	 
 747 0030 5DF8047B 	 ldr r7,[sp],#4
 748              	.LCFI61:
 749              	 .cfi_restore 7
 750              	 .cfi_def_cfa_offset 0
 751 0034 7047     	 bx lr
 752              	 .cfi_endproc
 753              	.LFE225:
 755              	 .section .text.XMC_SDMMC_SendCommand,"ax",%progbits
 756              	 .align 1
 757              	 .global XMC_SDMMC_SendCommand
 758              	 .syntax unified
 759              	 .thumb
 760              	 .thumb_func
 761              	 .fpu fpv4-sp-d16
 763              	XMC_SDMMC_SendCommand:
 764              	.LFB226:
 310:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 311:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Send SDMMC command */
 312:../Libraries/XMCLib/src/xmc_sdmmc.c **** XMC_SDMMC_STATUS_t XMC_SDMMC_SendCommand(XMC_SDMMC_t *const sdmmc, const XMC_SDMMC_COMMAND_t *cmd, 
 313:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 765              	 .loc 1 313 1
 766              	 .cfi_startproc
 767              	 
 768              	 
 769              	 
 770 0000 80B4     	 push {r7}
 771              	.LCFI62:
 772              	 .cfi_def_cfa_offset 4
 773              	 .cfi_offset 7,-4
 774 0002 85B0     	 sub sp,sp,#20
 775              	.LCFI63:
 776              	 .cfi_def_cfa_offset 24
 777 0004 00AF     	 add r7,sp,#0
 778              	.LCFI64:
 779              	 .cfi_def_cfa_register 7
 780 0006 F860     	 str r0,[r7,#12]
 781 0008 B960     	 str r1,[r7,#8]
 782 000a 7A60     	 str r2,[r7,#4]
 314:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_SendCommand: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 315:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 316:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->ARGUMENT1 = arg;
 783              	 .loc 1 316 20
 784 000c FB68     	 ldr r3,[r7,#12]
 785 000e 7A68     	 ldr r2,[r7,#4]
 786 0010 9A60     	 str r2,[r3,#8]
 317:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->COMMAND = (uint16_t)(*(uint16_t *)cmd);
 787              	 .loc 1 317 20
 788 0012 BB68     	 ldr r3,[r7,#8]
 789 0014 1A88     	 ldrh r2,[r3]
 790              	 .loc 1 317 18
 791 0016 FB68     	 ldr r3,[r7,#12]
 792 0018 DA81     	 strh r2,[r3,#14]
 318:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 319:../Libraries/XMCLib/src/xmc_sdmmc.c ****   return XMC_SDMMC_STATUS_SUCCESS;
 793              	 .loc 1 319 10
 794 001a 0023     	 movs r3,#0
 320:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 795              	 .loc 1 320 1
 796 001c 1846     	 mov r0,r3
 797 001e 1437     	 adds r7,r7,#20
 798              	.LCFI65:
 799              	 .cfi_def_cfa_offset 4
 800 0020 BD46     	 mov sp,r7
 801              	.LCFI66:
 802              	 .cfi_def_cfa_register 13
 803              	 
 804 0022 5DF8047B 	 ldr r7,[sp],#4
 805              	.LCFI67:
 806              	 .cfi_restore 7
 807              	 .cfi_def_cfa_offset 0
 808 0026 7047     	 bx lr
 809              	 .cfi_endproc
 810              	.LFE226:
 812              	 .section .text.XMC_SDMMC_SetDataTransferMode,"ax",%progbits
 813              	 .align 1
 814              	 .global XMC_SDMMC_SetDataTransferMode
 815              	 .syntax unified
 816              	 .thumb
 817              	 .thumb_func
 818              	 .fpu fpv4-sp-d16
 820              	XMC_SDMMC_SetDataTransferMode:
 821              	.LFB227:
 321:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 322:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Set data transfer mode */
 323:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_SetDataTransferMode(XMC_SDMMC_t *const sdmmc, XMC_SDMMC_TRANSFER_MODE_t *const respo
 324:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 822              	 .loc 1 324 1
 823              	 .cfi_startproc
 824              	 
 825              	 
 826              	 
 827 0000 80B4     	 push {r7}
 828              	.LCFI68:
 829              	 .cfi_def_cfa_offset 4
 830              	 .cfi_offset 7,-4
 831 0002 83B0     	 sub sp,sp,#12
 832              	.LCFI69:
 833              	 .cfi_def_cfa_offset 16
 834 0004 00AF     	 add r7,sp,#0
 835              	.LCFI70:
 836              	 .cfi_def_cfa_register 7
 837 0006 7860     	 str r0,[r7,#4]
 838 0008 3960     	 str r1,[r7]
 325:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_SetDataTransferMode: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sd
 326:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_SetDataTransferMode: Invalid transfer type", XMC_SDMMC_CHECK_TRANSFER_MODE(
 327:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 328:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Block size */
 329:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->BLOCK_SIZE = (uint16_t)(response->block_size);
 839              	 .loc 1 329 42
 840 000a 3B68     	 ldr r3,[r7]
 841 000c 1B68     	 ldr r3,[r3]
 842              	 .loc 1 329 23
 843 000e 9AB2     	 uxth r2,r3
 844              	 .loc 1 329 21
 845 0010 7B68     	 ldr r3,[r7,#4]
 846 0012 9A80     	 strh r2,[r3,#4]
 330:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 331:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Number of blocks */
 332:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->BLOCK_COUNT = (uint16_t)(response->num_blocks);
 847              	 .loc 1 332 43
 848 0014 3B68     	 ldr r3,[r7]
 849 0016 5B68     	 ldr r3,[r3,#4]
 850              	 .loc 1 332 24
 851 0018 9AB2     	 uxth r2,r3
 852              	 .loc 1 332 22
 853 001a 7B68     	 ldr r3,[r7,#4]
 854 001c DA80     	 strh r2,[r3,#6]
 333:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 334:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Type of data transfer: single, infinite, multiple or stop multiple */
 335:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->TRANSFER_MODE = (uint16_t)((sdmmc->TRANSFER_MODE & (uint16_t)~SDMMC_TRANSFER_MODE_MULTI_BL
 855              	 .loc 1 335 43
 856 001e 7B68     	 ldr r3,[r7,#4]
 857 0020 9B89     	 ldrh r3,[r3,#12]
 858 0022 9BB2     	 uxth r3,r3
 859 0024 1BB2     	 sxth r3,r3
 860              	 .loc 1 335 59
 861 0026 23F02003 	 bic r3,r3,#32
 862 002a 1AB2     	 sxth r2,r3
 336:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                     ((uint16_t)response->type));
 863              	 .loc 1 336 56
 864 002c 3B68     	 ldr r3,[r7]
 865 002e 1B7A     	 ldrb r3,[r3,#8]
 866 0030 1BB2     	 sxth r3,r3
 335:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                     ((uint16_t)response->type));
 867              	 .loc 1 335 116
 868 0032 1343     	 orrs r3,r3,r2
 869 0034 1BB2     	 sxth r3,r3
 335:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                     ((uint16_t)response->type));
 870              	 .loc 1 335 26
 871 0036 9AB2     	 uxth r2,r3
 335:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                     ((uint16_t)response->type));
 872              	 .loc 1 335 24
 873 0038 7B68     	 ldr r3,[r7,#4]
 874 003a 9A81     	 strh r2,[r3,#12]
 337:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 338:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /*
 339:../Libraries/XMCLib/src/xmc_sdmmc.c ****    * Clear block count enable bit; that's only valid for
 340:../Libraries/XMCLib/src/xmc_sdmmc.c ****    * a multi-block transfer
 341:../Libraries/XMCLib/src/xmc_sdmmc.c ****    */
 342:../Libraries/XMCLib/src/xmc_sdmmc.c ****   if (response->type == XMC_SDMMC_TRANSFER_MODE_TYPE_SINGLE)
 875              	 .loc 1 342 15
 876 003c 3B68     	 ldr r3,[r7]
 877 003e 1B7A     	 ldrb r3,[r3,#8]
 878              	 .loc 1 342 6
 879 0040 002B     	 cmp r3,#0
 880 0042 07D1     	 bne .L24
 343:../Libraries/XMCLib/src/xmc_sdmmc.c ****   {
 344:../Libraries/XMCLib/src/xmc_sdmmc.c ****     sdmmc->TRANSFER_MODE &= (uint16_t)~SDMMC_TRANSFER_MODE_BLOCK_COUNT_EN_Msk;
 881              	 .loc 1 344 26
 882 0044 7B68     	 ldr r3,[r7,#4]
 883 0046 9B89     	 ldrh r3,[r3,#12]
 884 0048 9BB2     	 uxth r3,r3
 885 004a 23F00203 	 bic r3,r3,#2
 886 004e 9AB2     	 uxth r2,r3
 887 0050 7B68     	 ldr r3,[r7,#4]
 888 0052 9A81     	 strh r2,[r3,#12]
 889              	.L24:
 345:../Libraries/XMCLib/src/xmc_sdmmc.c ****   }
 346:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 347:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Auto CMD configuration */
 348:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->TRANSFER_MODE = (uint16_t)((sdmmc->TRANSFER_MODE & (uint16_t)~SDMMC_TRANSFER_MODE_ACMD_EN_
 890              	 .loc 1 348 43
 891 0054 7B68     	 ldr r3,[r7,#4]
 892 0056 9B89     	 ldrh r3,[r3,#12]
 893 0058 9BB2     	 uxth r3,r3
 894 005a 1BB2     	 sxth r3,r3
 895              	 .loc 1 348 59
 896 005c 23F00C03 	 bic r3,r3,#12
 897 0060 1AB2     	 sxth r2,r3
 349:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                     ((uint16_t)response->auto_cmd << SDMMC_TRANSFER_MODE_ACMD_EN_Po
 898              	 .loc 1 349 56
 899 0062 3B68     	 ldr r3,[r7]
 900 0064 5B7A     	 ldrb r3,[r3,#9]
 901              	 .loc 1 349 67
 902 0066 9B00     	 lsls r3,r3,#2
 348:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                     ((uint16_t)response->auto_cmd << SDMMC_TRANSFER_MODE_ACMD_EN_Po
 903              	 .loc 1 348 105
 904 0068 1BB2     	 sxth r3,r3
 905 006a 1343     	 orrs r3,r3,r2
 906 006c 1BB2     	 sxth r3,r3
 348:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                     ((uint16_t)response->auto_cmd << SDMMC_TRANSFER_MODE_ACMD_EN_Po
 907              	 .loc 1 348 26
 908 006e 9AB2     	 uxth r2,r3
 348:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                     ((uint16_t)response->auto_cmd << SDMMC_TRANSFER_MODE_ACMD_EN_Po
 909              	 .loc 1 348 24
 910 0070 7B68     	 ldr r3,[r7,#4]
 911 0072 9A81     	 strh r2,[r3,#12]
 350:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 912              	 .loc 1 350 1
 913 0074 00BF     	 nop
 914 0076 0C37     	 adds r7,r7,#12
 915              	.LCFI71:
 916              	 .cfi_def_cfa_offset 4
 917 0078 BD46     	 mov sp,r7
 918              	.LCFI72:
 919              	 .cfi_def_cfa_register 13
 920              	 
 921 007a 5DF8047B 	 ldr r7,[sp],#4
 922              	.LCFI73:
 923              	 .cfi_restore 7
 924              	 .cfi_def_cfa_offset 0
 925 007e 7047     	 bx lr
 926              	 .cfi_endproc
 927              	.LFE227:
 929              	 .text
 930              	.Letext0:
 931              	 .file 2 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2020-q4-major\\arm-none-eabi\\include\\machine\\_default_types.h"
 932              	 .file 3 "c:\\program files (x86)\\gnu arm embedded toolchain\\10 2020-q4-major\\arm-none-eabi\\include\\sys\\_stdint.h"
 933              	 .file 4 "C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_811_X47_V1_0/Libraries/XMCLib/inc/xmc_sdmmc.h"
 934              	 .file 5 "C:/Workspaces/DAVE-4.4.2-64Bit/_PKDS_TSTS06_811_X47_V1_0/Libraries/XMCLib/inc/xmc4_scu.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_sdmmc.c
    {standard input}:17     .text.XMC_SDMMC_GetPowerStatus:00000000 $t
    {standard input}:25     .text.XMC_SDMMC_GetPowerStatus:00000000 XMC_SDMMC_GetPowerStatus
    {standard input}:74     .text.XMC_SDMMC_Enable:00000000 $t
    {standard input}:81     .text.XMC_SDMMC_Enable:00000000 XMC_SDMMC_Enable
    {standard input}:118    .text.XMC_SDMMC_Enable:0000001c $d
    {standard input}:123    .text.XMC_SDMMC_Disable:00000000 $t
    {standard input}:130    .text.XMC_SDMMC_Disable:00000000 XMC_SDMMC_Disable
    {standard input}:167    .text.XMC_SDMMC_Disable:0000001c $d
    {standard input}:172    .text.XMC_SDMMC_Init:00000000 $t
    {standard input}:179    .text.XMC_SDMMC_Init:00000000 XMC_SDMMC_Init
    {standard input}:255    .text.XMC_SDMMC_EnableEventStatus:00000000 $t
    {standard input}:262    .text.XMC_SDMMC_EnableEventStatus:00000000 XMC_SDMMC_EnableEventStatus
    {standard input}:325    .text.XMC_SDMMC_DisableEventStatus:00000000 $t
    {standard input}:332    .text.XMC_SDMMC_DisableEventStatus:00000000 XMC_SDMMC_DisableEventStatus
    {standard input}:399    .text.XMC_SDMMC_EnableEvent:00000000 $t
    {standard input}:406    .text.XMC_SDMMC_EnableEvent:00000000 XMC_SDMMC_EnableEvent
    {standard input}:469    .text.XMC_SDMMC_DisableEvent:00000000 $t
    {standard input}:476    .text.XMC_SDMMC_DisableEvent:00000000 XMC_SDMMC_DisableEvent
    {standard input}:543    .text.XMC_SDMMC_ClearEvent:00000000 $t
    {standard input}:550    .text.XMC_SDMMC_ClearEvent:00000000 XMC_SDMMC_ClearEvent
    {standard input}:601    .text.XMC_SDMMC_GetEvent:00000000 $t
    {standard input}:608    .text.XMC_SDMMC_GetEvent:00000000 XMC_SDMMC_GetEvent
    {standard input}:688    .text.XMC_SDMMC_GetR2Response:00000000 $t
    {standard input}:695    .text.XMC_SDMMC_GetR2Response:00000000 XMC_SDMMC_GetR2Response
    {standard input}:756    .text.XMC_SDMMC_SendCommand:00000000 $t
    {standard input}:763    .text.XMC_SDMMC_SendCommand:00000000 XMC_SDMMC_SendCommand
    {standard input}:813    .text.XMC_SDMMC_SetDataTransferMode:00000000 $t
    {standard input}:820    .text.XMC_SDMMC_SetDataTransferMode:00000000 XMC_SDMMC_SetDataTransferMode

UNDEFINED SYMBOLS
XMC_SCU_CLOCK_UngatePeripheralClock
XMC_SCU_RESET_DeassertPeripheralReset
XMC_SCU_RESET_AssertPeripheralReset
XMC_SCU_CLOCK_GatePeripheralClock
